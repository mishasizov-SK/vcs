// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
